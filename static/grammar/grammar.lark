start: (statement )+


?statement: if_statement | while_statement | expression ";" | declaration ";" | for_statement | function | return ";" | continue ";" | break ";"  | block |assignment ";"  

declaration.30: _LET " " target "=" expression

_LET: "let"

return.30: "return" expression -> return_statement
continue.30: "continue" -> continue_statement
break.30: "break" -> break_statement



if_statement.30: _IF "(" expression ")" statement
                |_IF "(" expression ")" statement _ELSE statement 

_IF.30: "if"
_ELSE.30: "else"

block: "{" (statement)+ "}"

array : "[" (expression ("," expression)*)? "]"
tuple : "(" (expression ","( expression ("," expression)*)?) ")" -> tuple
dictionary: "{" (dict_item ("," dict_item)*)? "}" -> dictionary
dict_item: expression ":" expression -> dict_item

length.10: target".length" -> length
        

comparison: expression "==" expression -> equals
         | expression "!=" expression -> not_equals
         | expression "<" expression -> lesser
         | expression ">" expression -> greater

while_statement: "while" "(" expression ")" statement

function.30 : _DEF target "(" targets? ")" block ->function_definition

_DEF: "def"

function_call.10: target "("( expression ("," expression)*)? ")"

for_statement.10: _FOR target _IN expression statement

_FOR: "for" 
_IN: "in"

?expression:  "-" expression -> negation
          | "!" expression -> inverse
          | expression _AND expression -> and_expression
          | expression _OR expression -> or_expression
          | comparison
          | length
          | array
          | tuple
          | dictionary
          | function_call
          | sum
          | "(" expression ")" -> grouped_expr  // Ensure parentheses enforce grouping

primary: literal
        | access

literal: NUMBER -> number
| ESCAPED_STRING  -> string
| bool 
| "None" -> none


bool: "True" -> true
    | "False" -> false
    
string: ESCAPED_STRING

sum: sum "+" term -> addition
    | sum "-" term -> subtraction
    | term -> single_term


term: term "*" factor -> multiplication
    | term "/" factor -> division
    | term "//" factor -> integer_division
    | term "%" factor -> modulo 
    | factor -> single_factor

factor: "-" factor -> negation
    | primary
    | "(" expression ")" -> grouped_expr 


target: NAME  | NAME "[" expression "]" ->indexed_target
targets: target ("," target)*



access: _indexed_access -> indexed_access
        |target
        
_indexed_access: expression "[" expression "]" 
assignment: target "=" expression 

_AND: " &&"
_OR: " ||"

%import common.CNAME  -> NAME
%import common.NUMBER
%import common.ESCAPED_STRING
%import common.WS
%import common.NEWLINE -> NL
COMMENT: /#[^\n]*/ | "//" /[^\n]*/
%ignore COMMENT
%ignore WS