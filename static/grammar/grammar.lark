start: (statement ";"?)+

COMMENT: /#[^\n]*/

%ignore COMMENT
?statement: assignment | if_statement | while_statement | expression | declaration | for_statement

assignment: target "=" expression 

declaration.30: _LET " " target "=" expression

_LET: "let"

target.10: NAME  | NAME"[" expression "]" ->indexed_target

if_statement: "if" "(" expression ")" "{" block"}" ("else" "{" block"}")?

block: (statement ";"?)+ 

_indexed_access.10: expression "[" expression "]" 

access: target
        |_indexed_access -> indexed_access

array : "[" (expression ("," expression)*)? "]"
tuple : "(" (expression ","( expression ("," expression)*)?) ")" -> tuple
dictionary: "{" (dict_item ("," dict_item)*)? "}" -> dictionary
dict_item: expression ":" expression -> dict_item

length.10: target".length" -> length
        

comparison: expression "==" expression -> equals
         | expression "<" expression -> lesser
         | expression ">" expression -> greater

while_statement: "while" "(" expression ")" "{" block "}"

function_call.10: target "("( expression ("," expression)*)? ")"

for_statement: "for" target "in" expression "{" block "}"

?expression:  "-" expression -> negation
          | comparison
          | length
          | array
          | tuple
          | dictionary
          | function_call
          | sum
          | "(" expression ")" -> grouped_expr  // Ensure parentheses enforce grouping

primary: literal
        | access

literal.20: NUMBER -> number
| ESCAPED_STRING  -> string
| bool 
| "None" -> none


bool: "True" -> true
    | "False" -> false
    
string: ESCAPED_STRING

sum: sum "+" term -> addition
    | sum "-" term -> subtraction
    | term -> single_term

term: term "*" factor -> multiplication
    | term "/" factor -> division
    | term "//" factor -> integer_division
    | term "%" factor -> modulo 
    | factor -> single_factor

factor: "-" factor -> negation
    | literal
    | primary
    | "(" expression ")" -> grouped_expr // This enforces correct parenthesis behavior

%import common.CNAME  -> NAME
%import common.NUMBER
%import common.ESCAPED_STRING
%import common.WS
%import common.NEWLINE -> NL

%ignore WS